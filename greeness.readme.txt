How to compile in Ubuntu?

(below steps were tested under Ubuntu 14.04)

* Basically Following https://github.com/tesseract-ocr/tesseract/wiki/Compiling
  to install dependencies.

* Install additional libs required by the training tools. 
  https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract-4.00#additional-libraries-required
sudo apt-get install libicu-dev
sudo apt-get install libpango1.0-dev
sudo apt-get install libcairo2-dev
sudo apt-get install autoconf-archive

* Do install "Leptonica" from the source. (get it here: http://www.leptonica.org/download.html)
  untar and then "./configure && make install".

* Then 

git clone --depth 1 https://github.com/greeness/tesseract.git
cd tesseract
./autogen.sh
./configure --enable-debug
LDFLAGS="-L/usr/local/lib" CFLAGS="-I/usr/local/include" make
sudo make install
sudo ldconfig

How to convert a wordlist to dawg file?

* Build the training tools
  https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract-4.00#building-the-training-tools

  "make training"
  After this step, you should see that there is a binary generated under tesseract/training/wordlist2dawg.
  

* Get a wordlist file (one word per line) -- say it is named "/tmp/wordlist.txt". looks like below:
## wordlist file begins at the next line.
long
longer
longest
## wordlist file ends at the previous line.

* Prepare a charset file (one allowed lower-case character plus 3 per line, looks like below for English).
  Note: 3 means it is an alphabet (not a number or something else) and it is in lower-case.
  with the first line has the number of total characters allowed.
## Charset file begins at the next line. -- saved as "/tmp/charset.txt"
26
a 3
b 3
c 3
d 3
e 3
f 3
g 3
h 3
i 3
j 3
k 3
l 3
m 3`
n 3
o 3
p 3
q 3
r 3
s 3
t 3
u 3
v 3
w 3
x 3
y 3
z 3
# Charset file ends at the previous line.

* Run the binary wordlist2dawg to produce dawg file for the small wordlist above.
training/wordlist2dawg /tmp/wordlist.txt /tmp/dawg.bin /tmp/charset.txt

To verify its correctness, you can perform a reverse transformation:
training/dawg2wordlist /tmp/charset.txt /tmp/dawg.bin /tmp/recovered.wordlist.txt

The "recovered.wordlist.txt" should contain the same set of words but could be in different order.

* Run the binary for the full dictionary.
$ training/wordlist2dawg /tmp/dictionary.txt /tmp/dawg_en-us.bin /tmp/eng.char.unicharset
Loading unicharset from '/tmp/eng.char.unicharset'
Reading word list from '/tmp/dictionary.txt'
Reducing Trie to SquishedDawg
Writing squished DAWG to '/tmp/dawg_en-us.bin'  (1.32MBytes)




